@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IModalService ModalService

<div class="simple-form">
    <div class="form-group text-center">
        @if (!loading)
        {
            <img class="w-50 h-50" src="@imgBase64" />
        }
        else
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
    </div>

    <div class="form-group col">
        <button @onclick="Close" class="btn btn-danger w-100 float-left mt-2">Kapat</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public string privateKey { get; set; }
    [Parameter] public string uid { get; set; }
    private string imgBase64 { get; set; }
    private bool loading { get; set; }
    async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));

    protected async override Task OnInitializedAsync()
    {
        loading = true;
        Notus.Core.Variable.GenericSignStruct tmpSign = Notus.Core.MergeRawData.GenericSign(privateKey);
        imgBase64 = await Notus.Core.Function.FindAvailableNode($"nft/detail/{uid}", new Dictionary<string, string>()
{
            {
                "data",
                JsonSerializer.Serialize(tmpSign)
            }
        }, Notus.Core.Variable.NetworkType.MainNet, Notus.Core.Variable.NetworkLayer.Layer2);
        loading = false;
        StateHasChanged();
    }
}